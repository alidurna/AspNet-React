{
  "info": {
    "_postman_id": "taskflow-api-collection",
    "name": "TaskFlow API - Complete Test Collection",
    "description": "TaskFlow ASP.NET Core Task Management API'nin t√ºm endpoint'lerini test etmek i√ßin hazƒ±rlanmƒ±≈ü comprehensive Postman collection'ƒ±.\n\n**Test Sƒ±rasƒ±:**\n1. User Registration + Login (JWT token alƒ±r)\n2. Categories CRUD operations\n3. TodoTasks CRUD operations\n4. Task completion operations\n5. Task statistics\n\n**Authentication:** JWT Bearer token (otomatik set edilir)\n**Base URL:** http://localhost:5280\n**Version:** 3.0 (T√ºm endpoint'ler dahil)",
    "version": "3.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{jwt_token}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:5280",
      "type": "string"
    },
    {
      "key": "jwt_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "user_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "category_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "task_id",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "üîê Authentication",
      "description": "Kullanƒ±cƒ± kayƒ±t ve giri≈ü i≈ülemleri",
      "item": [
        {
          "name": "1. User Registration",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201 || pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.data && response.data.token) {",
                  "        pm.collectionVariables.set('jwt_token', response.data.token);",
                  "        pm.collectionVariables.set('user_id', response.data.user.id);",
                  "        console.log('‚úÖ Registration successful, JWT token set');",
                  "    }",
                  "} else {",
                  "    console.log('‚ö†Ô∏è Registration response:', pm.response.text());",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\",\n  \"email\": \"test@taskflow.com\",\n  \"phoneNumber\": \"+905551234567\",\n  \"password\": \"TestPass123!\",\n  \"confirmPassword\": \"TestPass123!\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/users/register",
              "host": ["{{base_url}}"],
              "path": ["api", "users", "register"]
            },
            "description": "Yeni kullanƒ±cƒ± kaydƒ± olu≈üturur ve otomatik login yapar"
          }
        },
        {
          "name": "2. User Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.data && response.data.token) {",
                  "        pm.collectionVariables.set('jwt_token', response.data.token);",
                  "        pm.collectionVariables.set('user_id', response.data.user.id);",
                  "        console.log('‚úÖ Login successful, JWT token set');",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test@taskflow.com\",\n  \"password\": \"TestPass123!\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/users/login",
              "host": ["{{base_url}}"],
              "path": ["api", "users", "login"]
            },
            "description": "Kullanƒ±cƒ± giri≈üi yapar ve JWT token alƒ±r"
          }
        }
      ]
    },
    {
      "name": "üìÅ Categories Management",
      "description": "Kategori y√∂netimi i≈ülemleri - CRUD Operations",
      "item": [
        {
          "name": "3. Create Category",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.data && response.data.id) {",
                  "        pm.collectionVariables.set('category_id', response.data.id);",
                  "        console.log('‚úÖ Category created, ID:', response.data.id);",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Category\",\n  \"description\": \"Test kategorisi a√ßƒ±klamasƒ±\",\n  \"colorCode\": \"#007bff\",\n  \"icon\": \"üìù\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/categories",
              "host": ["{{base_url}}"],
              "path": ["api", "categories"]
            },
            "description": "Yeni kategori olu≈üturur"
          }
        },
        {
          "name": "4. Get All Categories",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/categories",
              "host": ["{{base_url}}"],
              "path": ["api", "categories"]
            },
            "description": "Kullanƒ±cƒ±nƒ±n t√ºm kategorilerini listeler"
          }
        },
        {
          "name": "5. Get Category by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/categories/{{category_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "categories", "{{category_id}}"]
            },
            "description": "Belirli bir kategorinin detaylarƒ±nƒ± getirir"
          }
        },
        {
          "name": "6. Update Category",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Test Category\",\n  \"description\": \"G√ºncellenmi≈ü kategori a√ßƒ±klamasƒ±\",\n  \"colorCode\": \"#28a745\",\n  \"icon\": \"‚úèÔ∏è\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/categories/{{category_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "categories", "{{category_id}}"]
            },
            "description": "Mevcut kategoriyi g√ºnceller"
          }
        },
        {
          "name": "7. Delete Category",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/categories/{{category_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "categories", "{{category_id}}"]
            },
            "description": "Kategoriyi siler (soft delete)"
          }
        }
      ]
    },
    {
      "name": "‚úÖ TodoTasks Management",
      "description": "Task y√∂netimi i≈ülemleri - Ana fonksiyonellik",
      "item": [
        {
          "name": "8. Create Task",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.data && response.data.id) {",
                  "        pm.collectionVariables.set('task_id', response.data.id);",
                  "        console.log('‚úÖ Task created, ID:', response.data.id);",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"categoryId\": {{category_id}},\n  \"title\": \"ƒ∞lk Test Task'ƒ±m\",\n  \"description\": \"Bu task TaskFlow API'sini test etmek i√ßin olu≈üturulmu≈ütur.\",\n  \"priority\": \"High\",\n  \"completionPercentage\": 0,\n  \"dueDate\": \"2024-12-31T23:59:59.000Z\",\n  \"reminderDate\": \"2024-12-30T10:00:00.000Z\",\n  \"startDate\": \"2024-12-01T09:00:00.000Z\",\n  \"tags\": \"test,api,postman\",\n  \"notes\": \"Postman ile test edilen ilk task\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/todotasks",
              "host": ["{{base_url}}"],
              "path": ["api", "todotasks"]
            },
            "description": "Yeni task olu≈üturur"
          }
        },
        {
          "name": "9. Get All Tasks",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/todotasks?page=1&pageSize=10&sortBy=CreatedAt&sortAscending=false",
              "host": ["{{base_url}}"],
              "path": ["api", "todotasks"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "pageSize",
                  "value": "10"
                },
                {
                  "key": "sortBy",
                  "value": "CreatedAt"
                },
                {
                  "key": "sortAscending",
                  "value": "false"
                }
              ]
            },
            "description": "Kullanƒ±cƒ±nƒ±n t√ºm task'larƒ±nƒ± listeler (pagination ile)"
          }
        },
        {
          "name": "10. Get Task by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/todotasks/{{task_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "todotasks", "{{task_id}}"]
            },
            "description": "Belirli bir task'in detaylarƒ±nƒ± getirir"
          }
        },
        {
          "name": "11. Update Task",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"G√ºncellenmi≈ü Test Task'ƒ±\",\n  \"description\": \"Bu task g√ºncellendi ve yeni a√ßƒ±klama eklendi.\",\n  \"priority\": \"Critical\",\n  \"completionPercentage\": 50,\n  \"tags\": \"test,api,postman,updated\",\n  \"notes\": \"Task g√ºncellendi - Postman test\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/todotasks/{{task_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "todotasks", "{{task_id}}"]
            },
            "description": "Mevcut task'i g√ºnceller (partial update)"
          }
        },
        {
          "name": "12. Complete Task",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"isCompleted\": true,\n  \"completionPercentage\": 100,\n  \"completionNote\": \"Task ba≈üarƒ±yla tamamlandƒ±! Postman ile test edildi.\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/todotasks/{{task_id}}/complete",
              "host": ["{{base_url}}"],
              "path": ["api", "todotasks", "{{task_id}}", "complete"]
            },
            "description": "Task'i tamamlar veya tamamlamayƒ± geri alƒ±r"
          }
        },
        {
          "name": "13. Get Task Statistics",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/todotasks/statistics",
              "host": ["{{base_url}}"],
              "path": ["api", "todotasks", "statistics"]
            },
            "description": "Kullanƒ±cƒ±nƒ±n task istatistiklerini getirir (dashboard i√ßin)"
          }
        },
        {
          "name": "14. Search Tasks",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/todotasks?searchText=test&priority=High&isCompleted=false&sortBy=Priority&sortAscending=true",
              "host": ["{{base_url}}"],
              "path": ["api", "todotasks"],
              "query": [
                {
                  "key": "searchText",
                  "value": "test"
                },
                {
                  "key": "priority",
                  "value": "High"
                },
                {
                  "key": "isCompleted",
                  "value": "false"
                },
                {
                  "key": "sortBy",
                  "value": "Priority"
                },
                {
                  "key": "sortAscending",
                  "value": "true"
                }
              ]
            },
            "description": "Task'larƒ± filtreler ve arar (advanced search)"
          }
        },
        {
          "name": "15. Create Sub-Task",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"categoryId\": {{category_id}},\n  \"parentTaskId\": {{task_id}},\n  \"title\": \"Alt Task - API Testleri\",\n  \"description\": \"Ana task'in alt g√∂revi - API endpoint'lerini test etmek\",\n  \"priority\": \"Normal\",\n  \"completionPercentage\": 0,\n  \"dueDate\": \"2024-12-25T15:00:00.000Z\",\n  \"tags\": \"subtask,test,api\",\n  \"notes\": \"Bu alt task hierarchy test i√ßin olu≈üturuldu\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/todotasks",
              "host": ["{{base_url}}"],
              "path": ["api", "todotasks"]
            },
            "description": "Ana task'a baƒülƒ± alt task olu≈üturur (hierarchy test)"
          }
        },
        {
          "name": "16. Delete Task",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/todotasks/{{task_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "todotasks", "{{task_id}}"]
            },
            "description": "Task'i siler (soft delete) - alt task'larƒ± da siler"
          }
        }
      ]
    },
    {
      "name": "üë§ User Profile",
      "description": "Kullanƒ±cƒ± profil i≈ülemleri",
      "item": [
        {
          "name": "17. Get User Profile",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/users/profile",
              "host": ["{{base_url}}"],
              "path": ["api", "users", "profile"]
            },
            "description": "Kullanƒ±cƒ±nƒ±n kendi profil bilgilerini getirir"
          }
        },
        {
          "name": "18. Update User Profile",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"Updated Test\",\n  \"lastName\": \"User Updated\",\n  \"phoneNumber\": \"+905559876543\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/users/profile",
              "host": ["{{base_url}}"],
              "path": ["api", "users", "profile"]
            },
            "description": "Kullanƒ±cƒ±nƒ±n profil bilgilerini g√ºnceller"
          }
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global pre-request script",
          "console.log('üöÄ Request:', pm.info.requestName);",
          "",
          "// JWT token kontrol√º (auth endpoint'leri hari√ß)",
          "if (!pm.info.requestName.includes('Registration') && !pm.info.requestName.includes('Login')) {",
          "    const token = pm.collectionVariables.get('jwt_token');",
          "    if (!token || token === '') {",
          "        console.log('‚ö†Ô∏è JWT token bulunamadƒ±. √ñnce login olun.');",
          "    }",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test script",
          "const responseTime = pm.response.responseTime;",
          "const statusCode = pm.response.code;",
          "",
          "console.log(`üìä ${pm.info.requestName} - ${statusCode} (${responseTime}ms)`);",
          "",
          "// Response time kontrol√º",
          "pm.test('Response time is acceptable', function () {",
          "    pm.expect(responseTime).to.be.below(5000); // 5 saniye",
          "});",
          "",
          "// JSON format kontrol√º",
          "if (pm.response.headers.get('Content-Type')?.includes('application/json')) {",
          "    pm.test('Response is valid JSON', function () {",
          "        pm.response.to.be.json;",
          "    });",
          "}"
        ]
      }
    }
  ]
}
